NAME: jenkins
LAST DEPLOYED: Sat Jan 25 09:20:41 2025
NAMESPACE: jenkins
STATUS: pending-install
REVISION: 1
USER-SUPPLIED VALUES:
controller:
  additionalPlugins:
  - uno-choice:2.8.6
  ingress:
    enabled: true

COMPUTED VALUES:
additionalAgents: {}
additionalClouds: {}
agent:
  TTYEnabled: false
  additionalContainers: []
  alwaysPullImage: false
  annotations: {}
  args: ${computer.jnlpmac} ${computer.name}
  command: null
  componentName: jenkins-agent
  connectTimeout: 100
  containerCap: 10
  customJenkinsLabels: []
  defaultsProviderTemplate: ""
  directConnection: false
  disableDefaultAgent: false
  enabled: true
  envVars: []
  garbageCollection:
    enabled: false
    namespaces: ""
    timeout: 300
  hostNetworking: false
  idleMinutes: 0
  image:
    repository: jenkins/inbound-agent
    tag: 3273.v4cfe589b_fd83-1
  imagePullSecretName: null
  inheritYamlMergeStrategy: false
  jenkinsTunnel: null
  jenkinsUrl: null
  jnlpregistry: null
  kubernetesConnectTimeout: 5
  kubernetesReadTimeout: 15
  livenessProbe: {}
  maxRequestsPerHostStr: "32"
  namespace: null
  nodeSelector: {}
  nodeUsageMode: NORMAL
  podLabels: {}
  podName: default
  podRetention: Never
  podTemplates: {}
  privileged: false
  resources:
    limits:
      cpu: 512m
      memory: 512Mi
    requests:
      cpu: 512m
      memory: 512Mi
  restrictedPssSecurityContext: false
  retentionTimeout: 5
  runAsGroup: null
  runAsUser: null
  secretEnvVars: []
  serviceAccount: null
  showRawYaml: true
  sideContainerName: jnlp
  skipTlsVerify: false
  usageRestricted: false
  useDefaultServiceAccount: true
  volumes: []
  waitForPodSec: 600
  websocket: false
  workingDir: /home/jenkins/agent
  workspaceVolume: {}
  yamlMergeStrategy: override
  yamlTemplate: ""
awsSecurityGroupPolicies:
  enabled: false
  policies:
  - name: ""
    podSelector: {}
    securityGroupIds: []
checkDeprecation: true
clusterZone: cluster.local
controller:
  JCasC:
    authorizationStrategy: |-
      loggedInUsersCanDoAnything:
        allowAnonymousRead: false
    configMapAnnotations: {}
    configScripts: {}
    configUrls: []
    defaultConfig: true
    overwriteConfiguration: false
    security:
      apiToken:
        creationOfLegacyTokenEnabled: false
        tokenGenerationOnCreationEnabled: false
        usageStatisticsEnabled: true
    securityRealm: |-
      local:
        allowsSignup: false
        enableCaptcha: false
        users:
        - id: "${chart-admin-username}"
          name: "Jenkins Admin"
          password: "${chart-admin-password}"
  additionalExistingSecrets: []
  additionalPlugins:
  - uno-choice:2.8.6
  additionalSecrets: []
  admin:
    createSecret: true
    existingSecret: ""
    password: null
    passwordKey: jenkins-admin-password
    userKey: jenkins-admin-user
    username: admin
  affinity: {}
  agentListenerEnabled: true
  agentListenerExternalTrafficPolicy: null
  agentListenerHostPort: null
  agentListenerLoadBalancerIP: null
  agentListenerLoadBalancerSourceRanges:
  - 0.0.0.0/0
  agentListenerNodePort: null
  agentListenerPort: 50000
  agentListenerServiceAnnotations: {}
  agentListenerServiceType: ClusterIP
  backendconfig:
    annotations: {}
    apiVersion: extensions/v1beta1
    enabled: false
    labels: {}
    name: null
    spec: {}
  cloudName: kubernetes
  clusterIp: null
  componentName: jenkins-controller
  containerEnv: []
  containerEnvFrom: []
  containerSecurityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsGroup: 1000
    runAsUser: 1000
  csrf:
    defaultCrumbIssuer:
      enabled: true
      proxyCompatability: true
  customInitContainers: []
  customJenkinsLabels: []
  disableRememberMe: false
  disabledAgentProtocols:
  - JNLP-connect
  - JNLP2-connect
  enableRawHtmlMarkupFormatter: false
  enableServiceLinks: false
  executorMode: NORMAL
  existingSecret: null
  extraPorts: []
  fsGroup: 1000
  googlePodMonitor:
    enabled: false
    scrapeEndpoint: /prometheus
    scrapeInterval: 60s
  healthProbes: true
  hostAliases: []
  hostNetworking: false
  httpsKeyStore:
    disableSecretMount: false
    enable: false
    fileName: keystore.jks
    httpPort: 8081
    jenkinsHttpsJksPasswordSecretKey: https-jks-password
    jenkinsHttpsJksPasswordSecretName: ""
    jenkinsHttpsJksSecretKey: jenkins-jks-file
    jenkinsHttpsJksSecretName: ""
    jenkinsKeyStoreBase64Encoded: null
    password: password
    path: /var/jenkins_keystore
  image:
    pullPolicy: Always
    registry: docker.io
    repository: jenkins/jenkins
    tag: null
    tagLabel: jdk17
  imagePullSecretName: null
  ingress:
    annotations: {}
    apiVersion: extensions/v1beta1
    enabled: true
    hostName: null
    labels: {}
    path: null
    paths: []
    resourceRootUrl: null
    tls: []
  initConfigMap: null
  initContainerEnv: []
  initContainerEnvFrom: []
  initContainerResources: {}
  initScripts: {}
  initializeOnce: false
  installLatestPlugins: true
  installLatestSpecifiedPlugins: false
  installPlugins:
  - kubernetes:4306.vc91e951ea_eb_d
  - workflow-aggregator:600.vb_57cdd26fdd7
  - git:5.7.0
  - configuration-as-code:1915.vcdd0a_d0d2625
  javaOpts: null
  jenkinsAdminEmail: null
  jenkinsHome: /var/jenkins_home
  jenkinsOpts: null
  jenkinsRef: /usr/share/jenkins/ref
  jenkinsUriPrefix: null
  jenkinsUrl: null
  jenkinsUrlProtocol: null
  jenkinsWar: /usr/share/jenkins/jenkins.war
  jmxPort: null
  legacyRemotingSecurityEnabled: false
  lifecycle: {}
  loadBalancerIP: null
  loadBalancerSourceRanges:
  - 0.0.0.0/0
  markupFormatter: plainText
  nodePort: null
  nodeSelector: {}
  numExecutors: 0
  overwritePlugins: false
  overwritePluginsFromImage: true
  podAnnotations: {}
  podDisruptionBudget:
    annotations: {}
    apiVersion: policy/v1beta1
    enabled: false
    labels: {}
    maxUnavailable: "0"
  podLabels: {}
  podSecurityContextOverride: null
  priorityClassName: null
  probes:
    livenessProbe:
      failureThreshold: 5
      httpGet:
        path: '{{ default "" .Values.controller.jenkinsUriPrefix }}/login'
        port: http
      initialDelaySeconds: null
      periodSeconds: 10
      timeoutSeconds: 5
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: '{{ default "" .Values.controller.jenkinsUriPrefix }}/login'
        port: http
      initialDelaySeconds: null
      periodSeconds: 10
      timeoutSeconds: 5
    startupProbe:
      failureThreshold: 12
      httpGet:
        path: '{{ default "" .Values.controller.jenkinsUriPrefix }}/login'
        port: http
      periodSeconds: 10
      timeoutSeconds: 5
  projectNamingStrategy: standard
  prometheus:
    alertingRulesAdditionalLabels: {}
    alertingrules: []
    enabled: false
    metricRelabelings: []
    prometheusRuleNamespace: ""
    relabelings: []
    scrapeEndpoint: /prometheus
    scrapeInterval: 60s
    serviceMonitorAdditionalLabels: {}
    serviceMonitorNamespace: null
  publishNotReadyAddresses: null
  resources:
    limits:
      cpu: 2000m
      memory: 4096Mi
    requests:
      cpu: 50m
      memory: 256Mi
  route:
    annotations: {}
    enabled: false
    labels: {}
    path: null
  runAsUser: 1000
  schedulerName: ""
  scriptApproval: []
  secondaryingress:
    annotations: {}
    apiVersion: extensions/v1beta1
    enabled: false
    hostName: null
    labels: {}
    paths: []
    tls: null
  secretClaims: []
  securityContextCapabilities: {}
  serviceAnnotations: {}
  serviceExternalTrafficPolicy: null
  serviceLabels: {}
  servicePort: 8080
  serviceType: ClusterIP
  shareProcessNamespace: false
  sidecars:
    additionalSidecarContainers: []
    configAutoReload:
      additionalVolumeMounts: []
      containerSecurityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
      enabled: true
      env: {}
      envFrom: []
      folder: /var/jenkins_home/casc_configs
      image:
        registry: docker.io
        repository: kiwigrid/k8s-sidecar
        tag: 1.29.0
      imagePullPolicy: IfNotPresent
      logging:
        configuration:
          backupCount: 3
          formatter: JSON
          logLevel: INFO
          logToConsole: true
          logToFile: false
          maxBytes: 1024
          override: false
      reqRetryConnect: 10
      resources: {}
      scheme: http
      skipTlsVerify: false
      sleepTime: null
      sshTcpPort: 1044
  statefulSetAnnotations: {}
  statefulSetLabels: {}
  targetPort: 8080
  terminationGracePeriodSeconds: null
  terminationMessagePath: null
  terminationMessagePolicy: null
  testEnabled: true
  tolerations: []
  topologySpreadConstraints: {}
  updateStrategy: {}
  usePodSecurityContext: true
credentialsId: null
fullnameOverride: null
helmtest:
  bats:
    image:
      registry: docker.io
      repository: bats/bats
      tag: 1.11.1
kubernetesURL: https://kubernetes.default
nameOverride: null
namespaceOverride: null
networkPolicy:
  apiVersion: networking.k8s.io/v1
  enabled: false
  externalAgents:
    except: []
    ipCIDR: null
  internalAgents:
    allowed: true
    namespaceLabels: {}
    podLabels: {}
persistence:
  accessMode: ReadWriteOnce
  annotations: {}
  dataSource: {}
  enabled: true
  existingClaim: null
  labels: {}
  mounts: []
  size: 8Gi
  storageClass: null
  subPath: null
  volumes: []
rbac:
  create: true
  readSecrets: false
  useOpenShiftNonRootSCC: false
renderHelmLabels: true
serviceAccount:
  annotations: {}
  create: true
  extraLabels: {}
  imagePullSecretName: null
  name: null
serviceAccountAgent:
  annotations: {}
  create: false
  extraLabels: {}
  imagePullSecretName: null
  name: null

HOOKS:
---
# Source: jenkins/templates/tests/test-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-tests
  namespace: jenkins
  annotations:
    "helm.sh/hook": test
data:
  run.sh: |-
    @test "Testing Jenkins UI is accessible" {
      curl --retry 48 --retry-delay 10 jenkins:8080/login
    }
---
# Source: jenkins/templates/tests/jenkins-test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "jenkins-ui-test-mwep0"
  namespace: jenkins
  annotations:
    "helm.sh/hook": test-success
spec:
  initContainers:
    - name: "test-framework"
      image: "docker.io/bats/bats:1.11.1"
      command:
        - "bash"
        - "-c"
      args:
        - |
          # copy bats to tools dir
          set -ex
          cp -R /opt/bats /tools/bats/
      volumeMounts:
      - mountPath: /tools
        name: tools
  containers:
    - name: jenkins-ui-test
      image: "docker.io/jenkins/jenkins:2.479.3-jdk17"
      command: ["/tools/bats/bin/bats", "-t", "/tests/run.sh"]
      volumeMounts:
      - mountPath: /tests
        name: tests
        readOnly: true
      - mountPath: /tools
        name: tools
  volumes:
  - name: tests
    configMap:
      name: jenkins-tests
  - name: tools
    emptyDir: {}
  restartPolicy: Never
MANIFEST:
---
# Source: jenkins/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-5.8.3"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
---
# Source: jenkins/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-5.8.3"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
type: Opaque
data:
  jenkins-admin-password: "c0FFdGFTRWlwV3p0RjZMaHBNN3NIRg=="
  jenkins-admin-user: "YWRtaW4="
---
# Source: jenkins/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
data:
  apply_config.sh: |-
    set -e
    echo "disable Setup Wizard"
    # Prevent Setup Wizard when JCasC is enabled
    echo $JENKINS_VERSION > /var/jenkins_home/jenkins.install.UpgradeWizard.state
    echo $JENKINS_VERSION > /var/jenkins_home/jenkins.install.InstallUtil.lastExecVersion
    echo "download plugins"
    # Install missing plugins
    cp /var/jenkins_config/plugins.txt /var/jenkins_home;
    rm -rf /usr/share/jenkins/ref/plugins/*.lock
    version () { echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'; }
    if [ -f "/usr/share/jenkins/jenkins.war" ] && [ -n "$(command -v jenkins-plugin-cli)" 2>/dev/null ] && [ $(version $(jenkins-plugin-cli --version)) -ge $(version "2.1.1") ]; then
      jenkins-plugin-cli --verbose --war "/usr/share/jenkins/jenkins.war" --plugin-file "/var/jenkins_home/plugins.txt" --latest true;
    else
      /usr/local/bin/install-plugins.sh `echo $(cat /var/jenkins_home/plugins.txt)`;
    fi
    echo "copy plugins to shared volume"
    # Copy plugins to shared volume
    yes n | cp -i /usr/share/jenkins/ref/plugins/* /var/jenkins_plugins/;
    echo "finished initialization"
  plugins.txt: |-
    kubernetes:4306.vc91e951ea_eb_d
    workflow-aggregator:600.vb_57cdd26fdd7
    git:5.7.0
    configuration-as-code:1915.vcdd0a_d0d2625
    uno-choice:2.8.6
---
# Source: jenkins/templates/jcasc-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "jenkins-jenkins-jcasc-config"
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": jenkins
    "helm.sh/chart": "jenkins-5.8.3"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
    jenkins-jenkins-config: "true"
data:
  jcasc-default-config.yaml: |-
    jenkins:
      authorizationStrategy:
        loggedInUsersCanDoAnything:
          allowAnonymousRead: false
      securityRealm:
        local:
          allowsSignup: false
          enableCaptcha: false
          users:
          - id: "${chart-admin-username}"
            name: "Jenkins Admin"
            password: "${chart-admin-password}"
      disableRememberMe: false
      mode: NORMAL
      numExecutors: 0
      labelString: ""
      projectNamingStrategy: "standard"
      markupFormatter:
        plainText
      clouds:
      - kubernetes:
          containerCapStr: "10"
          defaultsProviderTemplate: ""
          connectTimeout: "5"
          readTimeout: "15"
          jenkinsUrl: "http://jenkins.jenkins.svc.cluster.local:8080"
          jenkinsTunnel: "jenkins-agent.jenkins.svc.cluster.local:50000"
          skipTlsVerify: false
          usageRestricted: false
          maxRequestsPerHostStr: "32"
          retentionTimeout: "5"
          waitForPodSec: "600"
          name: "kubernetes"
          namespace: "jenkins"
          restrictedPssSecurityContext: false
          serverUrl: "https://kubernetes.default"
          credentialsId: ""
          podLabels:
          - key: "jenkins/jenkins-jenkins-agent"
            value: "true"
          templates:
            - name: "default"
              namespace: "jenkins"
              id: 42bded8ec3f61c8c96801c1d85a30d56e84a8c53a8541dd374d93bae8f41f06f
              containers:
              - name: "jnlp"
                alwaysPullImage: false
                args: "^${computer.jnlpmac} ^${computer.name}"
                envVars:
                  - envVar:
                      key: "JENKINS_URL"
                      value: "http://jenkins.jenkins.svc.cluster.local:8080/"
                image: "jenkins/inbound-agent:3273.v4cfe589b_fd83-1"
                privileged: "false"
                resourceLimitCpu: 512m
                resourceLimitMemory: 512Mi
                resourceRequestCpu: 512m
                resourceRequestMemory: 512Mi
                ttyEnabled: false
                workingDir: /home/jenkins/agent
              idleMinutes: 0
              instanceCap: 2147483647
              label: "jenkins-jenkins-agent "
              nodeUsageMode: "NORMAL"
              podRetention: Never
              showRawYaml: true
              serviceAccount: "default"
              slaveConnectTimeoutStr: "100"
              yamlMergeStrategy: override
              inheritYamlMergeStrategy: false
      crumbIssuer:
        standard:
          excludeClientIPFromCrumb: true
    security:
      apiToken:
        creationOfLegacyTokenEnabled: false
        tokenGenerationOnCreationEnabled: false
        usageStatisticsEnabled: true
    unclassified:
      location:
        url: http://jenkins:8080
---
# Source: jenkins/templates/home-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-5.8.3"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: jenkins/templates/rbac.yaml
# This role is used to allow Jenkins scheduling of agents via Kubernetes plugin.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jenkins-schedule-agents
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-5.8.3"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
rules:
- apiGroups: [""]
  resources: ["pods", "pods/exec", "pods/log", "persistentvolumeclaims", "events"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods", "pods/exec", "persistentvolumeclaims"]
  verbs: ["create", "delete", "deletecollection", "patch", "update"]
---
# Source: jenkins/templates/rbac.yaml
# The sidecar container which is responsible for reloading configuration changes
# needs permissions to watch ConfigMaps
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jenkins-casc-reload
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-5.8.3"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "watch", "list"]
---
# Source: jenkins/templates/rbac.yaml
# We bind the role to the Jenkins service account. The role binding is created in the namespace
# where the agents are supposed to run.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jenkins-schedule-agents
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-5.8.3"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jenkins-schedule-agents
subjects:
- kind: ServiceAccount
  name: jenkins
  namespace: jenkins
---
# Source: jenkins/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jenkins-watch-configmaps
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-5.8.3"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jenkins-casc-reload
subjects:
- kind: ServiceAccount
  name: jenkins
  namespace: jenkins
---
# Source: jenkins/templates/jenkins-agent-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: jenkins-agent
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-5.8.3"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
spec:
  ports:
    - port: 50000
      targetPort: 50000
      name: agent-listener
  selector:
    "app.kubernetes.io/component": "jenkins-controller"
    "app.kubernetes.io/instance": "jenkins"
  type: ClusterIP
---
# Source: jenkins/templates/jenkins-controller-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-5.8.3"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
spec:
  ports:
    - port: 8080
      name: http
      targetPort: 8080
  selector:
    "app.kubernetes.io/component": "jenkins-controller"
    "app.kubernetes.io/instance": "jenkins"
  type: ClusterIP
---
# Source: jenkins/templates/jenkins-controller-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-5.8.3"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
spec:
  serviceName: jenkins
  replicas: 1
  selector:
    matchLabels:
      "app.kubernetes.io/component": "jenkins-controller"
      "app.kubernetes.io/instance": "jenkins"
  template:
    metadata:
      labels:
        "app.kubernetes.io/name": 'jenkins'
        "app.kubernetes.io/managed-by": "Helm"
        "app.kubernetes.io/instance": "jenkins"
        "app.kubernetes.io/component": "jenkins-controller"
      annotations:
        checksum/config: 30e5a0b40d22713f2f9c80a7b2b6397b642fb646b2dc8048f5bff3659870cd80
    spec:
      enableServiceLinks: false
      securityContext:
    
        runAsUser: 1000
        fsGroup: 1000
        runAsNonRoot: true
      serviceAccountName: "jenkins"
      initContainers:
        - name: config-reload-init
          image: "docker.io/kiwigrid/k8s-sidecar:1.29.0"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: LABEL
              value: "jenkins-jenkins-config"
            - name: FOLDER
              value: "/var/jenkins_home/casc_configs"
            - name: NAMESPACE
              value: 'jenkins'
            - name: METHOD
              value: "LIST"
        
          resources:
            {}
          volumeMounts:
            - name: sc-config-volume
              mountPath: "/var/jenkins_home/casc_configs"
            - name: jenkins-home
              mountPath: /var/jenkins_home

        - name: "init"
          image: "docker.io/jenkins/jenkins:2.479.3-jdk17"
          imagePullPolicy: "Always"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsUser: 1000
          command: [ "sh", "/var/jenkins_config/apply_config.sh" ]
          resources:
            limits:
              cpu: 2000m
              memory: 4096Mi
            requests:
              cpu: 50m
              memory: 256Mi
          volumeMounts:
            - mountPath: /var/jenkins_home
              name: jenkins-home
            - mountPath: /var/jenkins_config
              name: jenkins-config
            - mountPath: /usr/share/jenkins/ref/plugins
              name: plugins
            - mountPath: /var/jenkins_plugins
              name: plugin-dir
            - mountPath: /tmp
              name: tmp-volume
      containers:
        - name: jenkins
          image: "docker.io/jenkins/jenkins:2.479.3-jdk17"
          imagePullPolicy: "Always"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsUser: 1000
          args: [ "--httpPort=8080"]
          env:
            - name: SECRETS
              value: /run/secrets/additional
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: JAVA_OPTS
              value: >-
                 -Dcasc.reload.token=$(POD_NAME) 
            - name: JENKINS_OPTS
              value: >-
                 --webroot=/var/jenkins_cache/war 
            - name: JENKINS_SLAVE_AGENT_PORT
              value: "50000"

            - name: CASC_JENKINS_CONFIG
              value: /var/jenkins_home/casc_configs
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 50000
              name: agent-listener
          startupProbe:
            failureThreshold: 12
            httpGet:
              path: '/login'
              port: http
            periodSeconds: 10
            timeoutSeconds: 5
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: '/login'
              port: http
            initialDelaySeconds: null
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: '/login'
              port: http
            initialDelaySeconds: null
            periodSeconds: 10
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 2000m
              memory: 4096Mi
            requests:
              cpu: 50m
              memory: 256Mi
          volumeMounts:
            - mountPath: /var/jenkins_home
              name: jenkins-home
              readOnly: false
            - mountPath: /var/jenkins_config
              name: jenkins-config
              readOnly: true
            - mountPath: /usr/share/jenkins/ref/plugins/
              name: plugin-dir
              readOnly: false
            - name: sc-config-volume
              mountPath: /var/jenkins_home/casc_configs
            - name: jenkins-secrets
              mountPath: /run/secrets/additional
              readOnly: true
            - name: jenkins-cache
              mountPath: /var/jenkins_cache
            - mountPath: /tmp
              name: tmp-volume
        - name: config-reload
          image: "docker.io/kiwigrid/k8s-sidecar:1.29.0"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: LABEL
              value: "jenkins-jenkins-config"
            - name: FOLDER
              value: "/var/jenkins_home/casc_configs"
            - name: NAMESPACE
              value: 'jenkins'
            - name: REQ_URL
              value: "http://localhost:8080/reload-configuration-as-code/?casc-reload-token=$(POD_NAME)"
            - name: REQ_METHOD
              value: "POST"
            - name: REQ_RETRY_CONNECT
              value: "10"
        
          resources:
            {}
          volumeMounts:
            - name: sc-config-volume
              mountPath: "/var/jenkins_home/casc_configs"
            - name: jenkins-home
              mountPath: /var/jenkins_home

      volumes:
      - name: plugins
        emptyDir: {}
      - name: jenkins-config
        configMap:
          name: jenkins
      - name: plugin-dir
        emptyDir: {}
      - name: jenkins-secrets
        projected:
          sources:
          - secret:
              name: jenkins
              items:
                - key: jenkins-admin-user
                  path: chart-admin-username
                - key: jenkins-admin-password
                  path: chart-admin-password
      - name: jenkins-cache
        emptyDir: {}
      - name: jenkins-home
        persistentVolumeClaim:
          claimName: jenkins
      - name: sc-config-volume
        emptyDir: {}
      - name: tmp-volume
        emptyDir: {}
---
# Source: jenkins/templates/jenkins-controller-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-5.8.3"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
  name: jenkins
spec:
  rules:
  - http:
      paths:
      - backend:
          service:
            name: jenkins
            port:
              number: 8080
        pathType: ImplementationSpecific

NOTES:
1. Get your 'admin' user password by running:
  kubectl exec --namespace jenkins -it svc/jenkins -c jenkins -- /bin/cat /run/secrets/additional/chart-admin-password && echo
2. Get the Jenkins URL to visit by running these commands in the same shell:
  echo http://127.0.0.1:8080
  kubectl --namespace jenkins port-forward svc/jenkins 8080:8080

3. Login with the password from step 1 and the username: admin
4. Configure security realm and authorization strategy
5. Use Jenkins Configuration as Code by specifying configScripts in your values.yaml file, see documentation: http://127.0.0.1:8080/configuration-as-code and examples: https://github.com/jenkinsci/configuration-as-code-plugin/tree/master/demos

For more information on running Jenkins on Kubernetes, visit:
https://cloud.google.com/solutions/jenkins-on-container-engine

For more information about Jenkins Configuration as Code, visit:
https://jenkins.io/projects/jcasc/


NOTE: Consider using a custom image with pre-installed plugins
